(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{356:function(t,a,e){"use strict";e.r(a);var s=e(42),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h4",{attrs:{id:"http缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http缓存"}},[t._v("#")]),t._v(" HTTP缓存")]),t._v(" "),e("h4",{attrs:{id:"使用http缓存的意义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用http缓存的意义"}},[t._v("#")]),t._v(" 使用HTTP缓存的意义")]),t._v(" "),e("p",[t._v("为什么要使用缓存，是因为缓存可以提高性能和用户体验")]),t._v(" "),e("ul",[e("li",[t._v("减少了冗余的数据传递，节省宽带流量")]),t._v(" "),e("li",[t._v("减少了服务器的负担，大大提高了网站性能")]),t._v(" "),e("li",[t._v("加快了网页加载速度 这也正是HTTP缓存属于客户端缓存的原因。")])]),t._v(" "),e("h4",{attrs:{id:"缓存存储位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存存储位置"}},[t._v("#")]),t._v(" 缓存存储位置")]),t._v(" "),e("p",[t._v("缓存的储存是内存和磁盘两个位置，由当前浏览器本身的策略决定，比较随机，从内存的缓存中取出的数据会显示 (from memory cache)，从磁盘的缓存中取出的数据会显示 (from disk cache)")]),t._v(" "),e("ul",[e("li",[t._v("存放到memory内存中的资源，当关闭页面时,此资源就会被内存释放掉,再次重新打开相同的页面时,不会出现from memory cache的情况。而存放到disk磁盘中的资源不会随着该页面的关闭而释放掉,因为是存在硬盘中的,下次打开仍然会是from disk cache")]),t._v(" "),e("li",[t._v("一般脚本、字体、图片会存在memory内存当中，一般非脚本会存在disk内存当中，如css等。")])]),t._v(" "),e("h4",{attrs:{id:"http缓存分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http缓存分类"}},[t._v("#")]),t._v(" HTTP缓存分类")]),t._v(" "),e("p",[t._v("包括：强制缓存和协商缓存")]),t._v(" "),e("h4",{attrs:{id:"强制缓存和协商缓存区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存和协商缓存区别"}},[t._v("#")]),t._v(" 强制缓存和协商缓存区别")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("协商缓存每次请求都需要跟服务器通信，验证本地缓存是否依旧有效，最终确定是否使用本地缓存")])]),t._v(" "),e("li",[e("p",[t._v("强制缓存命中缓存，服务器返回状态码是 200，而协商缓存命中缓存，服务器返回状态码是 304")]),t._v(" "),e("p",[e("img",{attrs:{src:"C:/Users/ucmed/Desktop/1598968226825.png",alt:"1598968226825"}})])])]),t._v(" "),e("h4",{attrs:{id:"强制缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存"}},[t._v("#")]),t._v(" 强制缓存")]),t._v(" "),e("p",[t._v("强制缓存是第一次访问服务器获取数据后，在有效时间内不会再请求服务器，而是直接使用缓存数据")]),t._v(" "),e("p",[t._v("对于强制缓存，服务器响应的header中会用两个字段来表明——Expires和Cache-Control")]),t._v(" "),e("p",[e("img",{attrs:{src:"C:/Users/ucmed/Desktop/1598968300239.png",alt:"1598968300239"}})]),t._v(" "),e("h5",{attrs:{id:"expires"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[t._v("#")]),t._v(" Expires")]),t._v(" "),e("p",[t._v("在 HTTP 1.0 版本，服务器使用的响应头字段为 Expires，Exprires的值为服务端返回的数据到期时间**(绝对时间)**。当再次请求时的请求时间小于返回的此时间，则直接使用缓存数据。但由于服务端时间和客户端时间可能有误差，这也将导致缓存命中的误差，另一方面，Expires是HTTP1.0的产物，故现在大多数使用Cache-Control替代。")]),t._v(" "),e("h5",{attrs:{id:"cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-Control")]),t._v(" "),e("p",[t._v("Cache-Control有很多属性，不同的属性代表的意义也不同。")]),t._v(" "),e("ul",[e("li",[t._v("private：客户端可以缓存")]),t._v(" "),e("li",[t._v("public：客户端和代理服务器都可以缓存")]),t._v(" "),e("li",[t._v("max-age=t：缓存内容将在t秒后失效")]),t._v(" "),e("li",[t._v("no-cache：需要使用协商缓存来验证缓存数据")]),t._v(" "),e("li",[t._v("no-store：所有内容都不会缓存。")])]),t._v(" "),e("p",[t._v("Cache-Control 的值中最常用的为 max-age=xxx**（相对时间）**，缓存本身就是为了数据传输的优化和性能而存在的，所以 no-store 几乎不会使用")]),t._v(" "),e("h5",{attrs:{id:"注意事项"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项：")]),t._v(" "),e("p",[t._v("在 HTTP 1.0版本中，Expires字段的"),e("strong",[t._v("绝对时间")]),t._v("是从服务器获取的，由于请求需要时间，所以浏览器的请求时间与服务器接收到请求所获取的时间是存在误差的，这也导致了缓存命中的误差，在 HTTP 1.1 版本中，因为 Cache-Control 的值 max-age=xxx 中的 xxx 是以秒为单位的"),e("strong",[t._v("相对时间")]),t._v("，所以在浏览器接收到资源后开始倒计时，规避了 HTTP 1.0 中缓存命中存在误差的缺点，为了兼容低版本 HTTP 协议，正常开发中两种响应头会同时使用，HTTP 1.1 版本的实现优先级高于 HTTP 1.0")]),t._v(" "),e("h4",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[t._v("#")]),t._v(" 协商缓存")]),t._v(" "),e("p",[t._v("设置协商缓存后，第一次访问服务器获取数据时，服务器会将数据和缓存标识一起返回给浏览器，客户端会将数据和标识存入缓存数据库中，下一次请求时，会先去缓存中取出缓存标识发送给服务器进行询问，当服务器数据更改时会更新标识，所以服务器拿到浏览器发来的标识进行对比，相同代表数据未更改，返回304状态码，浏览器会去缓存中获取数据。如果标识不同，代表服务器更改过数据，所以会将新的数据和新的标识返回浏览器，浏览器会将新的数据和标识存入缓存中。")]),t._v(" "),e("p",[e("img",{attrs:{src:"C:/Users/ucmed/Desktop/1598968340267.png",alt:"1598968340267"}})]),t._v(" "),e("h5",{attrs:{id:"两种协商缓存方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两种协商缓存方案"}},[t._v("#")]),t._v(" 两种协商缓存方案：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("在 HTTP 1.0 版本中，服务器通过 Last-Modified 响应头来设置缓存标识，通常取请求数据的最后修改时间（绝对时间）作为值")]),t._v("。而浏览器将接收到返回的数据和标识存入缓存，再次请求会自动发送 If-Modified-Since 请求头，值为之前返回的最后修改时间（标识），服务器取出 If-Modified-Since 的值与数据的上次修改时间对比，如果上次修改时间大于了 If-Modified-Since 的值，说明被修改过，则通过 Last-Modified 响应头返回新的最后修改时间和新的数据，否则未被修改，返回状态码 304 通知浏览器命中缓存。")]),t._v(" "),e("li",[e("strong",[t._v("在 HTTP 1.1 版本中，服务器通过 Etag 响应头来设置缓存标识（唯一标识，像一个指纹一样，生成规则由服务器来决定）")]),t._v("，浏览器接收到数据和唯一标识后存入缓存，下次请求时，通过 If-None-Match 请求头将唯一标识带给服务器，服务器取出唯一标识与之前的标识对比，不同，说明修改过，返回新标识和数据，相同，则返回状态码 304 通知浏览器命中缓存。")])]),t._v(" "),e("h5",{attrs:{id:"注意事项-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意事项-2"}},[t._v("#")]),t._v(" 注意事项：")]),t._v(" "),e("p",[t._v("使用协商缓存时 HTTP 1.0 版本还是不太靠谱，假设一个文件增加了一个字符后又删除了，文件相当于没更改，但是最后修改时间变了，会被当作修改处理，本应该命中缓存，服务器却重新发送了数据，因此 HTTP 1.1 中使用的 Etag 唯一标识是根据文件内容或摘要生成的，保证了只要文件内容不变，则一定会命中缓存，为了兼容低版本 HTTP 协议，开发中两种响应头也会同时使用，同样 HTTP 1.1 版本的实现优先级高于 HTTP 1.0")]),t._v(" "),e("p",[e("img",{attrs:{src:"C:/Users/ucmed/Desktop/1598967521830.png",alt:"1598967521830"}})]),t._v(" "),e("h4",{attrs:{id:"缓存使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存使用场景"}},[t._v("#")]),t._v(" 缓存使用场景")]),t._v(" "),e("p",[t._v("对于大部分的场景都可以使用强缓存配合协商缓存解决，但是在一些特殊的地方可能需要选择特殊的缓存策略")]),t._v(" "),e("ul",[e("li",[t._v("对于某些不需要缓存的资源，可以使用 Cache-control: no-store ，表示该资源不需要缓存")]),t._v(" "),e("li",[t._v("对于频繁变动的资源，可以使用 Cache-Control: no-cache 并配合 ETag 使用，表示该资源已被缓存，但是每次都会发送请求询问资源是否更新")])]),t._v(" "),e("h4",{attrs:{id:"不同刷新的请求执行过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不同刷新的请求执行过程"}},[t._v("#")]),t._v(" 不同刷新的请求执行过程")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("浏览器地址栏中写入URL，回车")]),t._v("。浏览器发现缓存中有这个文件了，不用继续请求了，直接去缓存拿。（最快）")]),t._v(" "),e("li",[e("strong",[t._v("F5")]),t._v("就是告诉浏览器，别偷懒，好歹去服务器看看这个文件是否有过期了。于是浏览器就战战兢兢的发送一个请求带上If-Modify-since/If-None-Match。")]),t._v(" "),e("li",[e("strong",[t._v("Ctrl+F5")]),t._v("告诉浏览器，你先把你缓存中的这个文件给我删了，然后再去服务器请求个完整的资源文件下来。于是客户端就完成了强行更新的操作")])]),t._v(" "),e("h4",{attrs:{id:"调试技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调试技巧"}},[t._v("#")]),t._v(" 调试技巧")]),t._v(" "),e("ul",[e("li",[t._v("使用vue.js devtools、React Developer Tools")])]),t._v(" "),e("p",[t._v("安装谷歌访问助手 https://segmentfault.com/a/1190000022210711")]),t._v(" "),e("p",[t._v("vue-devtool安装")]),t._v(" "),e("p",[t._v("1、添加插件 https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd/related")]),t._v(" "),e("p",[t._v("2、 允许访问文件网址")]),t._v(" "),e("p",[t._v("3、 Vue.js is detected on this page. Devtools inspection is not available beacause it’s in production mode or explicity disabled by the author  引入vue.min.js是不行的，引入vue.js才能使用vue-devtools。（我把vue.min.js 改为 vue.js 后就可以了！！！）如果你是在chrome商店里安装的vue-devtools，那么需要到这个扩展的安装路径下找到manifest.json文件，把其中的”persistent”: false，需改为：true。")]),t._v(" "),e("ul",[e("li",[t._v("抓包工具的使用")])]),t._v(" "),e("p",[t._v("https://zj.lexiangla.com/teams/k100051/docs/79b0fa725c5711eabd650a58ac136690?company_from=zj")]),t._v(" "),e("ul",[e("li",[t._v("使用vconsole")])]),t._v(" "),e("p",[t._v("http://localhost:8090/h5.html/#/healthCardList?hospitalId=1118033010345151344&token=13727732024e8c2d5a7bd1cdce3b712d")])])}),[],!1,null,null,null);a.default=v.exports}}]);